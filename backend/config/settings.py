"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-b!bd3gycxy^srur!2ezi)i635ym@g9c$0p1a@$!b@uip(c02s("
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True") == "True"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Add Vercel hosts
if os.environ.get("VERCEL"):
    ALLOWED_HOSTS.extend([".vercel.app", ".vercel.com"])


# Application definition

INSTALLED_APPS = [
    # Third party apps
    "rest_framework",
    "corsheaders",
    "csp",  # Content Security Policy
    # Our apps
    "chapters",
    "members",
    "reports",
    "analytics",
    "bni",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Security headers
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "csp.middleware.CSPMiddleware",  # Content Security Policy
]

ROOT_URLCONF = "config.urls"

TEMPLATES = []

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Parse DATABASE_URL if provided (for production)
DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    # Parse Supabase/PostgreSQL connection string
    # Format: postgresql://user:password@host:port/database
    import dj_database_url

    # Parse the connection string with persistent connections
    db_config = dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=True)

    # Add connection pooling and performance options
    db_config["OPTIONS"] = {
        "sslmode": "require",
        "connect_timeout": 10,
    }

    # Enable connection pooling for better performance
    db_config["CONN_MAX_AGE"] = 600  # Keep connections alive for 10 minutes
    db_config["CONN_HEALTH_CHECKS"] = True  # Enable connection health checks

    DATABASES = {"default": db_config}
else:
    # Development - use SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# No authentication - removed auth system


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Only use compressed storage if staticfiles exist
if os.path.exists(BASE_DIR / "staticfiles"):
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework settings - JWT authentication enabled
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "chapters.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # Require authentication by default
    ],
    "UNAUTHENTICATED_USER": None,  # Don't use Django User model
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "EXCEPTION_HANDLER": "rest_framework.views.exception_handler",
}

# CORS settings
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")

# For Vercel deployments, allow all Vercel domains
if os.environ.get("VERCEL") or any(
    ".vercel.app" in origin for origin in CORS_ALLOWED_ORIGINS
):
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.vercel\.app$",
    ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# ==============================================================================
# SECURITY HEADERS CONFIGURATION (Task #5)
# ==============================================================================
# Comprehensive security headers to protect against common web vulnerabilities
# References:
# - OWASP Security Headers: https://owasp.org/www-project-secure-headers/
# - Mozilla Observatory: https://observatory.mozilla.org/

# Content Security Policy (CSP)
# Prevents XSS attacks by controlling which resources can be loaded
# ==============================================================================
CSP_DEFAULT_SRC = ("'self'",)  # Default: only load from same origin

# Script sources - allow inline scripts for React
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for React inline event handlers
    "'unsafe-eval'",    # Required for React development mode
)

# Style sources - allow inline styles for styled components
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for inline styles in components
    "https://fonts.googleapis.com",  # Google Fonts if used
)

# Image sources - allow data URIs and HTTPS images
CSP_IMG_SRC = (
    "'self'",
    "data:",           # Data URIs for inline images
    "https:",          # HTTPS images
    "blob:",           # Blob URLs for dynamically generated images
)

# Font sources
CSP_FONT_SRC = (
    "'self'",
    "data:",           # Data URIs for fonts
    "https://fonts.gstatic.com",  # Google Fonts if used
)

# Connection sources - API endpoints
CSP_CONNECT_SRC = (
    "'self'",
    "http://localhost:8000",     # Local API
    "https://*.vercel.app",      # Vercel API
    "https://*.supabase.co",     # Supabase database
)

# Frame sources - prevent clickjacking
CSP_FRAME_SRC = ("'none'",)  # Don't allow any frames

# Object sources - prevent plugin-based attacks
CSP_OBJECT_SRC = ("'none'",)  # Don't allow plugins

# Base URI restriction
CSP_BASE_URI = ("'self'",)

# Form action restriction
CSP_FORM_ACTION = ("'self'",)

# Frame ancestors - prevent clickjacking
CSP_FRAME_ANCESTORS = ("'none'",)  # Don't allow site to be framed

# Upgrade insecure requests (force HTTPS in production)
if not DEBUG:
    CSP_UPGRADE_INSECURE_REQUESTS = True

# X-Frame-Options (legacy browsers that don't support CSP frame-ancestors)
# ==============================================================================
X_FRAME_OPTIONS = "DENY"  # Prevent site from being embedded in iframes

# X-Content-Type-Options
# ==============================================================================
# Prevent MIME-type sniffing attacks
SECURE_CONTENT_TYPE_NOSNIFF = True  # X-Content-Type-Options: nosniff

# X-XSS-Protection (legacy, but still useful for older browsers)
# ==============================================================================
SECURE_BROWSER_XSS_FILTER = True  # X-XSS-Protection: 1; mode=block

# Referrer Policy
# ==============================================================================
# Control what information is sent in Referer header
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
# Options:
# - "no-referrer": Never send referrer
# - "same-origin": Only send for same-origin requests
# - "strict-origin": Only send origin (not full URL) for HTTPSâ†’HTTPS
# - "strict-origin-when-cross-origin": Full URL for same-origin, origin for cross-origin (RECOMMENDED)

# Permissions Policy (formerly Feature-Policy)
# ==============================================================================
# Control which browser features can be used
PERMISSIONS_POLICY = {
    "accelerometer": [],        # Disable accelerometer
    "camera": [],               # Disable camera access
    "geolocation": [],          # Disable geolocation
    "microphone": [],           # Disable microphone
    "payment": [],              # Disable payment APIs
    "usb": [],                  # Disable USB access
}

# HTTPS/SSL Settings (PRODUCTION ONLY)
# ==============================================================================
# Only enforce HTTPS in production (when DEBUG=False)
if not DEBUG:
    # Strict-Transport-Security (HSTS)
    # Forces browsers to only use HTTPS for the specified duration
    SECURE_HSTS_SECONDS = 31536000  # 1 year (recommended: 63072000 for 2 years)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply to subdomains
    SECURE_HSTS_PRELOAD = True  # Allow submission to HSTS preload list

    # Force HTTPS redirects
    SECURE_SSL_REDIRECT = True  # Redirect all HTTP to HTTPS

    # Secure cookies
    SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
    CSRF_COOKIE_SECURE = True     # Only send CSRF cookie over HTTPS

    # Additional cookie security
    SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
    CSRF_COOKIE_HTTPONLY = True     # Prevent JavaScript access to CSRF cookie
    SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection
    CSRF_COOKIE_SAMESITE = 'Lax'     # CSRF protection
else:
    # Development settings - allow HTTP
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# ==============================================================================
# END SECURITY HEADERS CONFIGURATION
# ==============================================================================
