"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-b!bd3gycxy^srur!2ezi)i635ym@g9c$0p1a@$!b@uip(c02s("
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True") == "True"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Add Vercel hosts
if os.environ.get("VERCEL"):
    ALLOWED_HOSTS.extend([".vercel.app", ".vercel.com"])


# Application definition

INSTALLED_APPS = [
    # Third party apps
    "rest_framework",
    "corsheaders",
    "csp",  # Content Security Policy
    # Our apps
    "chapters",
    "members",
    "reports",
    "analytics",
    "bni",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Security headers
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "csp.middleware.CSPMiddleware",  # Content Security Policy
]

ROOT_URLCONF = "config.urls"

TEMPLATES = []

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Parse DATABASE_URL if provided (for production)
DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    # Parse Supabase/PostgreSQL connection string
    # Format: postgresql://user:password@host:port/database
    import dj_database_url

    # Parse the connection string with persistent connections
    db_config = dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=True)

    # Add connection pooling and performance options
    db_config["OPTIONS"] = {
        "sslmode": "require",
        "connect_timeout": 10,
    }

    # Enable connection pooling for better performance
    db_config["CONN_MAX_AGE"] = 600  # Keep connections alive for 10 minutes
    db_config["CONN_HEALTH_CHECKS"] = True  # Enable connection health checks

    DATABASES = {"default": db_config}
else:
    # Development - use SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# No authentication - removed auth system


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Only use compressed storage if staticfiles exist
if os.path.exists(BASE_DIR / "staticfiles"):
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework settings - JWT authentication enabled
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "chapters.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # Require authentication by default
    ],
    "UNAUTHENTICATED_USER": None,  # Don't use Django User model
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    # Custom exception handler for standardized error responses
    "EXCEPTION_HANDLER": "bni.exceptions.custom_exception_handler",
}

# CORS settings
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")

# For Vercel deployments, allow all Vercel domains
if os.environ.get("VERCEL") or any(
    ".vercel.app" in origin for origin in CORS_ALLOWED_ORIGINS
):
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.vercel\.app$",
    ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# ==============================================================================
# SECURITY HEADERS CONFIGURATION (Task #5)
# ==============================================================================
# Comprehensive security headers to protect against common web vulnerabilities
# References:
# - OWASP Security Headers: https://owasp.org/www-project-secure-headers/
# - Mozilla Observatory: https://observatory.mozilla.org/

# Content Security Policy (CSP) - django-csp 4.0+ format
# Prevents XSS attacks by controlling which resources can be loaded
# ==============================================================================
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ("'self'",),
        "script-src": ("'self'", "'unsafe-inline'", "'unsafe-eval'"),
        "style-src": ("'self'", "'unsafe-inline'", "https://fonts.googleapis.com"),
        "img-src": ("'self'", "data:", "https:", "blob:"),
        "font-src": ("'self'", "data:", "https://fonts.gstatic.com"),
        "connect-src": (
            "'self'",
            "http://localhost:8000",
            "https://*.vercel.app",
            "https://*.supabase.co",
        ),
        "frame-src": ("'none'",),
        "object-src": ("'none'",),
        "base-uri": ("'self'",),
        "form-action": ("'self'",),
        "frame-ancestors": ("'none'",),
    }
}

# Upgrade insecure requests (force HTTPS in production)
if not DEBUG:
    CONTENT_SECURITY_POLICY["DIRECTIVES"]["upgrade-insecure-requests"] = True

# X-Frame-Options (legacy browsers that don't support CSP frame-ancestors)
# ==============================================================================
X_FRAME_OPTIONS = "DENY"  # Prevent site from being embedded in iframes

# X-Content-Type-Options
# ==============================================================================
# Prevent MIME-type sniffing attacks
SECURE_CONTENT_TYPE_NOSNIFF = True  # X-Content-Type-Options: nosniff

# X-XSS-Protection (legacy, but still useful for older browsers)
# ==============================================================================
SECURE_BROWSER_XSS_FILTER = True  # X-XSS-Protection: 1; mode=block

# Referrer Policy
# ==============================================================================
# Control what information is sent in Referer header
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
# Options:
# - "no-referrer": Never send referrer
# - "same-origin": Only send for same-origin requests
# - "strict-origin": Only send origin (not full URL) for HTTPSâ†’HTTPS
# - "strict-origin-when-cross-origin": Full URL for same-origin, origin for cross-origin (RECOMMENDED)

# Permissions Policy (formerly Feature-Policy)
# ==============================================================================
# Control which browser features can be used
PERMISSIONS_POLICY = {
    "accelerometer": [],  # Disable accelerometer
    "camera": [],  # Disable camera access
    "geolocation": [],  # Disable geolocation
    "microphone": [],  # Disable microphone
    "payment": [],  # Disable payment APIs
    "usb": [],  # Disable USB access
}

# HTTPS/SSL Settings (PRODUCTION ONLY)
# ==============================================================================
# Only enforce HTTPS in production (when DEBUG=False)
if not DEBUG:
    # Strict-Transport-Security (HSTS)
    # Forces browsers to only use HTTPS for the specified duration
    SECURE_HSTS_SECONDS = 31536000  # 1 year (recommended: 63072000 for 2 years)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply to subdomains
    SECURE_HSTS_PRELOAD = True  # Allow submission to HSTS preload list

    # Force HTTPS redirects
    SECURE_SSL_REDIRECT = True  # Redirect all HTTP to HTTPS

    # Secure cookies
    SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
    CSRF_COOKIE_SECURE = True  # Only send CSRF cookie over HTTPS

    # Additional cookie security
    SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
    CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookie
    SESSION_COOKIE_SAMESITE = "Lax"  # CSRF protection
    CSRF_COOKIE_SAMESITE = "Lax"  # CSRF protection
else:
    # Development settings - allow HTTP
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# ==============================================================================
# END SECURITY HEADERS CONFIGURATION
# ==============================================================================

# ==============================================================================
# CACHING CONFIGURATION
# ==============================================================================
# Use Redis for caching in production, local memory in development
if not DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'bni',
            'TIMEOUT': 900,  # 15 minutes default
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'bni-cache',
            'OPTIONS': {
                'MAX_ENTRIES': 1000
            }
        }
    }

# Cache timeouts (in seconds)
CACHE_TTL = {
    'chapter_list': 900,  # 15 minutes
    'chapter_detail': 300,  # 5 minutes
    'member_list': 600,  # 10 minutes
    'monthly_report': 1800,  # 30 minutes
    'aggregated_report': 3600,  # 1 hour
}
# ==============================================================================
# END CACHING CONFIGURATION
# ==============================================================================

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'json',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'chapters': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'members': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'reports': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'analytics': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'bni': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
import os
os.makedirs(BASE_DIR / 'logs', exist_ok=True)
# ==============================================================================
# END LOGGING CONFIGURATION
# ==============================================================================

# ==============================================================================
# BACKUP CONFIGURATION
# ==============================================================================
# Backup directory - where backup files are stored
BACKUP_DIR = os.environ.get('BACKUP_DIR', str(BASE_DIR / 'backups'))

# Backup retention policy
# Keep all backups from the last X days
BACKUP_KEEP_DAILY = int(os.environ.get('BACKUP_KEEP_DAILY', 7))

# Keep weekly backups for last X weeks (Sundays only)
BACKUP_KEEP_WEEKLY = int(os.environ.get('BACKUP_KEEP_WEEKLY', 4))

# Keep monthly backups for last X months (1st of month only)
BACKUP_KEEP_MONTHLY = int(os.environ.get('BACKUP_KEEP_MONTHLY', 3))

# Create backup directory if it doesn't exist
os.makedirs(BACKUP_DIR, exist_ok=True)
# ==============================================================================
# END BACKUP CONFIGURATION
# ==============================================================================

# ==============================================================================
# ERROR MONITORING & LOGGING CONFIGURATION
# ==============================================================================

# Sentry Error Monitoring
SENTRY_DSN = os.environ.get('SENTRY_DSN')
SENTRY_ENVIRONMENT = os.environ.get('SENTRY_ENVIRONMENT', 'development')

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
        ],
        environment=SENTRY_ENVIRONMENT,
        # Performance Monitoring
        traces_sample_rate=0.1 if SENTRY_ENVIRONMENT == 'production' else 1.0,
        # Error Sampling
        send_default_pii=False,  # Don't send personally identifiable information
        # Release tracking
        release=os.environ.get('SENTRY_RELEASE', 'unknown'),
        # Ignore common errors
        ignore_errors=[
            KeyboardInterrupt,
        ],
    )

# Enhanced logging configuration with JSON formatting for production
if not DEBUG:
    LOGGING['formatters']['json'] = {
        '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
        'format': '%(asctime)s %(name)s %(levelname)s %(message)s %(pathname)s %(lineno)d'
    }
    LOGGING['handlers']['console']['formatter'] = 'json'

# ==============================================================================
# END ERROR MONITORING & LOGGING CONFIGURATION
# ==============================================================================
